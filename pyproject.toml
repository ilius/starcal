[tool.ruff]
target-version = "py310"
line-length = 88

# see https://docs.astral.sh/ruff/rules/
lint.select = [
	"F", # Pyflakes
	"E", # pycodestyle Error
	"W", # pycodestyle Warning
	# "C90", # mccabe: C901: {name} is too complex ({complexity})
	"I", # isort: unsorted-imports, missing-required-import
	"D",   # pydocstyle
	"B",   # flake8-bugbear
	"UP",  # pyupgrade
	"YTT", # flake8-2020
	# "ANN", # flake8-annotationsq, still gives errors for `self`
	# "ASYNC", # flake8-async
	"ASYNC1", # flake8-trio
	# "S", # flake8-bandit
	"BLE", # flake8-blind-except
	# "FBT", # flake8-boolean-trap
	"B", # flake8-bugbear
	"A", # flake8-builtins
	"COM", # flake8-commas
	# "CPY", # flake8-copyright   --preview
	"C4",  # flake8-comprehensions
	"DTZ", # flake8-datetimez
	"T10", # flake8-debugger
	"DJ",  # flake8-django
	# "EM",    # flake8-errmsg, WTF?
	"EXE", # flake8-executable
	"FA",  # flake8-future-annotations
	"ISC", # flake8-implicit-str-concat
	"INP", # flake8-no-pep420
	"PIE", # flake8-pie
	# "T20",  # flake8-print
	"PYI",  # flake8-pyi
	"PT",   # flake8-pytest-style
	"Q",    # flake8-quotes
	"RSE",  # flake8-raise
	"RET",  # flake8-return
	"SLF",  # flake8-self
	"SLOT", # flake8-slots
	"SIM",  # flake8-simplify
	"TID",  # flake8-tidy-imports
	"TCH",  # flake8-type-checking
	"INT",  # flake8-gettext
	"ARG",  # flake8-unused-arguments
	# "PTH",   # flake8-use-pathlib
	# "ERA",   # eradicate
	# "PD",  # pandas-vet: full of false positives
	"PGH", # pygrep-hooks
	"PL",  # Pylint
	"TRY", # tryceratops, some are BS
	"FLY",   # flynt
	"NPY",  # NumPy-specific rules
	"AIR",  # Airflow
	"PERF", # Perflint
	"FURB",  # refurb
	"LOG", # flake8-logging
	"RUF", # Ruff-specific rules
]
# warning: The following rules may cause conflicts when used with the formatter:
# `COM812`, `ISC001`.
# To avoid unexpected behavior, we recommend disabling these rules, either by removing them from the `select` or `extend-select` configuration, or adding them to the `ignore` configuration.

lint.ignore = [
	"FURB189", # Subclassing `list` can be error prone, use `collections.UserList` instead
	"FURB103", # `open` and `write` should be replaced by `Path(...)....`
	"PYI024",  # Use `typing.NamedTuple` instead of `collections.namedtuple`
	"PLC0206", # Extracting value from dictionary without calling `.items()`

	"PYI034", # py3.11: `__iadd__` methods in classes like `...` usually return `self` at runtime

	"PLR1702", # Too many nested blocks
	"PLR0904", # Too many public methods (? > 20)
	"PLR0912", # Too many branches
	"PLR0913", # Too many arguments in function definition
	"PLR0914", # Too many local variables
	"PLR0915", # Too many statements
	"PLR0917", # Too many positional arguments
	"PLR2004", # Magic value used in comparison, consider replacing `...` with a constant variable
	"PLW0603", # Using the global statement to update `...` is discouraged
	"PLC0415", # `import` should be at the top-level of a file

	"BLE001",  # Do not catch blind exception: `Exception`
	"C408",    # Unnecessary `dict` call (rewrite as a literal)
	"D100",    # Missing docstring in public module
	"D101",    # Missing docstring in public class
	"D102",    # Missing docstring in public method
	"D103",    # Missing docstring in public function
	"D104",    # Missing docstring in public package
	"D105",    # Missing docstring in magic method
	"D106",    # Missing docstring in public nested class
	"D107",    # Missing docstring in `__init__`
	"D205",    # 1 blank line required between summary line and description
	"D206",    # Docstring should be indented with spaces, not tabs
	"D211",    # (Do not enable) no-blank-line-before-class
	"D212",    # multi-line-summary-first-line, conflicts with D213:multi-line-summary-second-line
	"D401",    # First line of docstring should be in imperative mood
	"D417",    # Missing argument descriptions in the docstring
	"DTZ001",  # The use of `datetime.datetime()` without `tzinfo` argument is not allowed
	"DTZ005",  # The use of `datetime.datetime.now()` without `tz` argument is not allowed
	"FURB101", # `open` and `read` should be replaced by `Path(rootConfJsonFile).read_text()`
	"PLR0911", # Too many return statements (x > 6)
	"RUF001",  # String contains ambiguous `٠` (ARABIC-INDIC DIGIT ZERO). Did you mean `.` (FULL STOP)
	"RUF003",  # Comment contains ambiguous `۰` (EXTENDED ARABIC-INDIC DIGIT ZERO). Did you mean `.` (FULL STOP)?
	"RUF005",  # Consider `[*_list, x]` instead of concatenation
	"RUF012",  # Mutable class attributes should be annotated with `typing.ClassVar`
	"RUF100",  # Unused `noqa` directive (non-enabled: ...)

	"TRY003", # BS: Avoid specifying long messages outside the exception class
	"TRY400", # BS: Use `logging.exception` instead of `logging.error`
	"SIM105", # Use contextlib.suppress({exception}) instead of try-except-pass
	"SIM108", # Use ternary operator {contents} instead of if-else-block
	"SIM117", # Use a single with statement with multiple contexts...
	"PT009",  # Use a regular `assert` instead of unittest-style `assertEqual`, why?
	"PT027",  # Use `pytest.raises` instead of unittest-style `assertRaises`, why?
	"RET502", # Do not implicitly `return None` in function able to return non-`None` value
	"E402",   # Module level import not at top of file
	"S101",   # Use of `assert` detected
	"W191",   # Indentation contains tabs
]

# UP033: (Since Python 3.9) Use `@functools.cache`
# instead of `@functools.lru_cache(maxsize=None)`

# since which Python is comma after **kwargs allowd?

# Allow autofix for all enabled rules (when `--fix`) is provided.
# lint.fixable = [
# 	"TRY",   # tryceratops
#     "ANN",
#     "C408", # Unnecessary `dict` call (rewrite as a literal)
#     "COM",
#     "D",
#     "E",
#     "F",
#     "W",
#     "F401",
#     "I",
#     "Q",
#     "PIE790",
#     "RET",
#     "RUF",
#     # "SIM",
#     "SIM108", # Use ternary operator {contents} instead of if-else-block
#     "TCH",
#     "UP",
# ]
lint.unfixable = []

# Exclude a variety of commonly ignored directories.
exclude = [
	"scal3/account/google.py",
	"libs",
	# "setup.py",
]


# Allow unused variables when underscore-prefixed.
lint.dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.lint.per-file-ignores]
"scal3/ui_gtk4/*.py" = [
	"F841", # Local variable `...` is assigned to but never used
	"ARG",  # flake8-unused-arguments
	"F401", #... imported but unused
]
"scripts/*.py" = [
	"T201", # `print` found
	"SIM",
]
"tools/*.py" = [
	"T201",   # `print` found
	"INP001", # File `...` is part of an implicit namespace package. Add an `__init__.py`.
]
"distro/base/install.py" = [
	"T201", # `print` found
	"S603", # `subprocess` call: check for execution of untrusted input
	"S607", # Starting a process with a partial executable path
	"S103", # `os.chmod` setting a permissive mask `0o755` on file or directory
]
"scal3/account/google.py" = [
	"S108", # Probable insecure usage of temporary file or directory: "/tmp/starcal-request"
	"S106", # Possible hardcoded password assigned to argument: "client_secret"

]
"scal3/bin_heap.py" = [
	"S311", # Standard pseudo-random generators are not suitable for cryptographic purposes
]
"*_test.py" = [
	"T201",    # `print` found
	"T203",    # `pprint` found
	"S311",    # Standard pseudo-random generators are not suitable for cryptographic purposes
	"PLR6301", # Method `...` could be a function, class method, or static method
]
"scal3/__init__.py" = [
	"F822", # Undefined name `...` in `__all__`
]
"scal3/ui_gtk/event/event/__init__.py" = [
	"F822", # Undefined name `...` in `__all__`
]

"scal3/event_search_tree.py" = [
	"PYI024", # Use `typing.NamedTuple` instead of `collections.namedtuple`
]

"tools/afghanistan-events.py" = ["FLY"]

[tool.ruff.format]
quote-style = "double"
indent-style = "tab"
# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false
# Like Black, automatically detect the appropriate line ending.
line-ending = "lf"
docstring-code-format = false


[tool.ruff.lint.mccabe]
# Unlike Flake8, default to a complexity level of 10.
max-complexity = 15

[tool.cercis]
line-length = 88
single-quote = false
use-tabs = true
base-indentation-spaces = 4
function-definition-extra-indent = false
other-line-continuation-extra-indent = false
closing-bracket-extra-indent = false
wrap-line-with-long-string = true
collapse-nested-brackets = false
wrap-comments = true
wrap-pragma-comments = true

[tool.mypy]
exclude = []

[tool.refurb]
ignore = [
	117, # Replace `open(filename, "rb")` with `filename.open("rb")`
	184, # Assignment statement should be chained
	101, # Replace `with open(x, ...) as f: y = f.read()` with `y = Path(x).read_bytes()`
	103, # Replace `with open(x, ...) as f: f.write(y)` with `Path(x).write_bytes(y)`
	104, # Replace `os.getcwd()` with `Path.cwd()`
	107, # Replace `try: ... except OSError: pass` with `with suppress(OSError): ...`
	# 112, # Replace `dict()` with `{}`
	141, # Replace `os.path.exists(x)` with `Path(x).exists()`
	144, # Replace `os.remove(x)` with `Path(x).unlink()`
	146, # Replace `os.path.isfile(x)` with `Path(x).is_file()`
	150, # Replace `os.makedirs(x)` with `Path(x).mkdir(parents=True)`
	155, # Replace `os.path.getsize(x)` with `Path(x).stat().st_size`
]
# refurb has no exclude param!
#load = ["some_module"]
#quiet = true

[tool.vulture]
exclude = ["scal3/account/", "*_test.py", "scal3/ui_gtk/arch-enable-locale.py"]
ignore_names = [
	"OPEN_START",
	"validDate",
	"prefVersion",
	"getMonthWeekNth",
	"rgbToInt",
	"rgbToHsl",
	"htmlColorToRgb",
	"_*",
	"test*",
]

[tool.fixit]
disable = ["fixit.rules.no_namedtuple"]

[[tool.fixit.overrides]]
path = "libs/bson/"
disable = ["fixit.rules"]
